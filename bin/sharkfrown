#!/usr/bin/env ruby

require 'thin'
require 'rack'
require 'pygmentize'
require 'redcarpet'

class Sharkfrown
  class PygmentizeHTML < Redcarpet::Render::HTML
    def block_code(code, language)
      require 'pygmentize'
      result = Pygmentize.process(code, language)
      result = "<pre>#{code}</pre>" if result.empty?

      result
    end
  end

  def call(env)
    dup._call(env)
  end

  def _call(env)
    path = env['PATH_INFO']

    if path[%r{\.(md|mdown|markdown)$}]
      file = File.join(Dir.pwd, env['PATH_INFO'])

      if !(time = env['QUERY_STRING']).empty?
        [ 200, {}, [ (File.mtime(file).to_i > time.to_i) ? 'reload' : '' ] ]
      else
        [
          200,
          { 'Content-Type' => 'text/html' },
          [ template(file) ]
        ]
      end
    else
      Rack::Directory.new('.').call(env)
    end
  end

  def template(file)
    <<-HTML
<html>
  <head>
    <title>Sharkfrown - #{file}</title>
    <link rel="stylesheet" href="https://raw.github.com/gist/1082608/4cf6e61c7fb5d766861f30e98640665f464a35af/gh-like.css" type="text/css" />
    <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
    <script type="text/javascript">
      $(function() {
        var checker;
        checker = function() {
          $.get(document.location.href + "?#{Time.now.to_i}", {}, function(responseText) { 
            if (responseText == 'reload') {
              document.location.href = document.location.href;
            } else {
              setTimeout(checker, 2000);
            }
          });
        };
        checker();
      });
    </script>
  </head>
  <body>
    <a href=".">Back</a>
    #{Redcarpet::Markdown.new(PygmentizeHTML, :fenced_code_blocks => true).render(File.read(file))}
  </body>
</html>
HTML
  end
end

Thin::Server.start('0.0.0.0', 6789) do
  use Rack::CommonLogger
  use Rack::ShowExceptions

  run Sharkfrown.new
end
